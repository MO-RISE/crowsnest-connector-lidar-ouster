#!/usr/bin/env python3

"""
Command line utility tool for configuring an Ouster Lidar Sensor.

Currently just provides the basic settings to be changed
"""
import argparse
from ouster import client


def configure_sensor(
    hostname: str,
    lidar_port: int,
    imu_port: int,
    lidar_mode: client.LidarMode,
    operating_mode: client.OperatingMode,
) -> client.SensorConfig:

    # Configure the Ouster lidar sensor
    config = client.SensorConfig()
    config.udp_port_lidar = lidar_port
    config.udp_port_imu = imu_port
    config.lidar_mode = lidar_mode
    config.operating_mode = operating_mode

    client.set_config(hostname, config, persist=True, udp_dest_auto=True)

    return client.get_config(hostname)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="ouster-configure")
    parser.add_argument(
        "hostname",
        type=str,
        help="Hostname of Ouster sensor",
    )
    parser.add_argument(
        "--lidar_port",
        type=int,
        default=7502,
        help="UDP port for LIDAR packets",
    )
    parser.add_argument(
        "--imu_port",
        type=int,
        default=7503,
        help="UDP port for IMU packets",
    )
    valid_lidar_modes = [val.name for val in client.LidarMode.values]
    parser.add_argument(
        "--lidar_mode",
        choices=valid_lidar_modes,
        default="1024x10",
        # action=client.LidarMode.from_string,
        help="Lidar mode, see sensor documentation",
    )
    valid_operaring_modes = [val.name for val in client.OperatingMode.values]
    parser.add_argument(
        "--operating_mode",
        choices=valid_operaring_modes,
        default="NORMAL",
        # action=client.OperatingMode.from_string,
        help="Operating mode, see sensor documentation",
    )

    args = parser.parse_args()
    config = configure_sensor(
        hostname=args.hostname,
        lidar_port=args.lidar_port,
        imu_port=args.imu_port,
        lidar_mode=client.LidarMode.from_string(args.lidar_mode),
        operating_mode=client.OperatingMode.from_string(args.operating_mode),
    )

    print(config)
